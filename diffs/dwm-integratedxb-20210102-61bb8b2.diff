From 3376ca1f2e9292afcab9814c92642f4c216ea5ee Mon Sep 17 00:00:00 2001
From: dk949 <david2000katz@gmail.com>
Date: Sat, 2 Jan 2021 02:04:52 +0000
Subject: [PATCH] Change backlight brightness from dwm using integrated
 xbacklight.

All of the functionality of command line xbacklight is available.
Currently only inc and dec are used in the config file, but set
is also available. get can be found in the xbacklight.h file but
does not have a binding in dwm.c
---
 Makefile     |   2 +-
 config.def.h |   4 +
 config.mk    |   5 +-
 dwm.c        |  27 ++++++
 xbacklight.c | 258 +++++++++++++++++++++++++++++++++++++++++++++++++++
 xbacklight.h |  24 +++++
 6 files changed, 318 insertions(+), 2 deletions(-)
 create mode 100644 xbacklight.c
 create mode 100644 xbacklight.h

diff --git a/Makefile b/Makefile
index 77bcbc0..0176577 100644
--- a/Makefile
+++ b/Makefile
@@ -3,7 +3,7 @@
 
 include config.mk
 
-SRC = drw.c dwm.c util.c
+SRC = drw.c dwm.c util.c xbacklight.c
 OBJ = ${SRC:.c=.o}
 
 all: options dwm
diff --git a/config.def.h b/config.def.h
index 1c0b587..acc0e46 100644
--- a/config.def.h
+++ b/config.def.h
@@ -5,6 +5,8 @@ static const unsigned int borderpx  = 1;        /* border pixel of windows */
 static const unsigned int snap      = 32;       /* snap pixel */
 static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
+static const int bright_time        = 60;       /* corresponds to xbacklight -time (in useconds) */
+static const int bright_steps       = 20;       /* corresponds to xbacklight -steps */
 static const char *fonts[]          = { "monospace:size=10" };
 static const char dmenufont[]       = "monospace:size=10";
 static const char col_gray1[]       = "#222222";
@@ -84,6 +86,8 @@ static Key keys[] = {
 	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
 	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
 	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
+	{ MODKEY,                       XK_F12,    bright_inc,     {.f = 10.0 } },
+	{ MODKEY,                       XK_F11,    bright_dec,     {.f = 10.0 } },
 	TAGKEYS(                        XK_1,                      0)
 	TAGKEYS(                        XK_2,                      1)
 	TAGKEYS(                        XK_3,                      2)
diff --git a/config.mk b/config.mk
index 7084c33..e254019 100644
--- a/config.mk
+++ b/config.mk
@@ -14,6 +14,9 @@ X11LIB = /usr/X11R6/lib
 XINERAMALIBS  = -lXinerama
 XINERAMAFLAGS = -DXINERAMA
 
+# xbacklight
+XBACKLIGHTLIBS = -lxcb-randr -lxcb -lxcb-util
+
 # freetype
 FREETYPELIBS = -lfontconfig -lXft
 FREETYPEINC = /usr/include/freetype2
@@ -22,7 +25,7 @@ FREETYPEINC = /usr/include/freetype2
 
 # includes and libs
 INCS = -I${X11INC} -I${FREETYPEINC}
-LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${FREETYPELIBS}
+LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${FREETYPELIBS} ${XBACKLIGHTLIBS}
 
 # flags
 CPPFLAGS = -D_DEFAULT_SOURCE -D_BSD_SOURCE -D_POSIX_C_SOURCE=200809L -DVERSION=\"${VERSION}\" ${XINERAMAFLAGS}
diff --git a/dwm.c b/dwm.c
index 664c527..0c980af 100644
--- a/dwm.c
+++ b/dwm.c
@@ -43,6 +43,7 @@
 
 #include "drw.h"
 #include "util.h"
+#include "xbacklight.h"
 
 /* macros */
 #define BUTTONMASK              (ButtonPressMask|ButtonReleaseMask)
@@ -148,6 +149,9 @@ static void arrange(Monitor *m);
 static void arrangemon(Monitor *m);
 static void attach(Client *c);
 static void attachstack(Client *c);
+static void bright_dec(const Arg *arg);
+static void bright_inc(const Arg *arg);
+static void bright_set(const Arg *arg);
 static void buttonpress(XEvent *e);
 static void checkotherwm(void);
 static void cleanup(void);
@@ -414,6 +418,27 @@ attachstack(Client *c)
 	c->mon->stack = c;
 }
 
+void
+bright_dec(const Arg *arg)
+{
+    if (bright_dec_(arg->f))
+        fprintf( stderr, "Fucntion bright_dec_(const Arg *arg) from xbacklight.h returned a non 0 value");
+}
+
+void
+bright_inc(const Arg *arg)
+{
+    if (bright_inc_(arg->f))
+        fprintf( stderr, "Fucntion bright_inc_(const Arg *arg) from xbacklight.h returned a non 0 value");
+}
+
+void
+bright_set(const Arg *arg)
+{
+    if (bright_set_(arg->f))
+        fprintf( stderr, "Fucntion bright_set_(const Arg *arg) from xbacklight.h returned a non 0 value");
+}
+
 void
 buttonpress(XEvent *e)
 {
@@ -2140,6 +2165,8 @@ main(int argc, char *argv[])
 		die("dwm: cannot open display");
 	checkotherwm();
 	setup();
+    if(bright_setup(NULL, bright_steps, bright_time))
+        die("xbacklight setup failed");
 #ifdef __OpenBSD__
 	if (pledge("stdio rpath proc exec", NULL) == -1)
 		die("pledge");
diff --git a/xbacklight.c b/xbacklight.c
new file mode 100644
index 0000000..1d82eff
--- /dev/null
+++ b/xbacklight.c
@@ -0,0 +1,258 @@
+/*
+ * Copyright Â© 2007 Keith Packard
+ *
+ * Permission to use, copy, modify, distribute, and sell this software and its
+ * documentation for any purpose is hereby granted without fee, provided that
+ * the above copyright notice appear in all copies and that both that copyright
+ * notice and this permission notice appear in supporting documentation, and
+ * that the name of the copyright holders not be used in advertising or
+ * publicity pertaining to distribution of the software without specific,
+ * written prior permission.  The copyright holders make no representations
+ * about the suitability of this software for any purpose.  It is provided "as
+ * is" without express or implied warranty.
+ *
+ * THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
+ * INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
+ * EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY SPECIAL, INDIRECT OR
+ * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
+ * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
+ * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
+ * OF THIS SOFTWARE.
+ */
+
+
+/*
+ * This code is based on xbacklight (https://gitlab.freedesktop.org/xorg/app/xbacklight)
+ * copyright notice for which can be found above.
+ *
+ * Modifications made by dk949 on 2021-01-02
+ */
+
+#include "xbacklight.h"
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+#include <xcb/randr.h>
+#include <xcb/xcb.h>
+#include <xcb/xcb_util.h>
+#include <xcb/xproto.h>
+
+typedef enum { Get, Set, Inc, Dec } op_t;
+static int steps, total_time /* ms */;
+
+static xcb_atom_t backlight, backlight_new, backlight_legacy;
+static xcb_connection_t *conn;
+
+
+static long backlight_get(xcb_connection_t *connection, xcb_randr_output_t output) {
+    xcb_generic_error_t *generic_error;
+    xcb_randr_get_output_property_reply_t *prop_reply = NULL;
+    xcb_randr_get_output_property_cookie_t prop_cookie;
+    long value;
+    backlight = backlight_new;
+
+    if (backlight != XCB_ATOM_NONE) {
+        prop_cookie =
+            xcb_randr_get_output_property(connection, output, backlight, XCB_ATOM_NONE, 0, 4, 0, 0);
+        prop_reply = xcb_randr_get_output_property_reply(connection, prop_cookie, &generic_error);
+        if (generic_error != NULL || prop_reply == NULL) {
+            backlight = backlight_legacy;
+            if (backlight != XCB_ATOM_NONE) {
+                prop_cookie = xcb_randr_get_output_property(connection, output, backlight,
+                                                            XCB_ATOM_NONE, 0, 4, 0, 0);
+                prop_reply = xcb_randr_get_output_property_reply(connection, prop_cookie, &generic_error);
+                if (generic_error != NULL || prop_reply == NULL) {
+                    return -1;
+                }
+            }
+        }
+    }
+
+    if (prop_reply == NULL || prop_reply->type != XCB_ATOM_INTEGER || prop_reply->num_items != 1 ||
+        prop_reply->format != 32) {
+        value = -1;
+    } else {
+        value = *((int32_t *)xcb_randr_get_output_property_data(prop_reply));
+    }
+
+    free(prop_reply);
+    return value;
+}
+
+static void backlight_set(xcb_randr_output_t output, long value) {
+    xcb_randr_change_output_property(conn, output, backlight, XCB_ATOM_INTEGER, 32,
+                                     XCB_PROP_MODE_REPLACE, 1, (unsigned char *)&value);
+}
+
+
+
+int bright_setup(char *dpy_name, int step_conf, int time_conf) {
+    steps = step_conf;
+    total_time = time_conf;
+
+
+    xcb_generic_error_t *error;
+    xcb_intern_atom_reply_t *backlight_reply;
+    xcb_randr_query_version_reply_t *ver_reply;
+    xcb_randr_query_version_cookie_t ver_cookie;
+    xcb_intern_atom_cookie_t backlight_cookie[2];
+
+    conn = xcb_connect(dpy_name, NULL);
+    ver_cookie = xcb_randr_query_version(conn, 1, 2);
+    ver_reply = xcb_randr_query_version_reply(conn, ver_cookie, &error);
+    if (error != NULL || ver_reply == NULL) {
+        int ec = error ? error->error_code : -1;
+        fprintf(stderr, "RANDR Query Version returned error %d\n", ec);
+        return 1;
+    }
+    if (ver_reply->major_version != 1 || ver_reply->minor_version < 2) {
+        fprintf(stderr, "RandR version %d.%d too old\n", ver_reply->major_version, ver_reply->minor_version);
+        return 1;
+    }
+    free(ver_reply);
+
+    backlight_cookie[0] = xcb_intern_atom(conn, 1, strlen("Backlight"), "Backlight");
+    backlight_cookie[1] = xcb_intern_atom(conn, 1, strlen("BACKLIGHT"), "BACKLIGHT");
+
+    backlight_reply = xcb_intern_atom_reply(conn, backlight_cookie[0], &error);
+    if (error != NULL || backlight_reply == NULL) {
+        int ec = error ? error->error_code : -1;
+        fprintf(stderr, "Intern Atom returned error %d\n", ec);
+        return 1;
+    }
+
+    backlight_new = backlight_reply->atom;
+    free(backlight_reply);
+
+    backlight_reply = xcb_intern_atom_reply(conn, backlight_cookie[1], &error);
+    if (error != NULL || backlight_reply == NULL) {
+        int ec = error ? error->error_code : -1;
+        fprintf(stderr, "Intern Atom returned error %d\n", ec);
+        return 1;
+    }
+
+    backlight_legacy = backlight_reply->atom;
+    free(backlight_reply);
+
+    if (backlight_new == XCB_NONE && backlight_legacy == XCB_NONE) {
+        fprintf(stderr, "No outputs have backlight property\n");
+        return 1;
+    }
+
+    return 0;
+}
+
+
+int run(double value, op_t op, double* new_value) {
+    int i;
+    double tmp;
+    if (!new_value){
+        new_value = &tmp;
+    }
+
+    xcb_generic_error_t *error;
+    xcb_screen_iterator_t iter;
+
+    iter = xcb_setup_roots_iterator(xcb_get_setup(conn));  // Pretty sure this gets managed by something else and i don't need to free it
+    while (iter.rem) {
+        xcb_screen_t *screen = iter.data;
+        xcb_window_t root = screen->root;
+        xcb_randr_output_t *outputs;
+
+        xcb_randr_get_screen_resources_current_cookie_t resources_cookie;
+        xcb_randr_get_screen_resources_current_reply_t *resources_reply;
+
+        resources_cookie = xcb_randr_get_screen_resources_current(conn, root);
+        resources_reply = xcb_randr_get_screen_resources_current_reply(conn, resources_cookie, &error);
+        if (error != NULL || resources_reply == NULL) {
+            int ec = error ? error->error_code : -1;
+            fprintf(stderr, "RANDR Get Screen Resources returned error %d\n", ec);
+            continue;
+        }
+
+        outputs = xcb_randr_get_screen_resources_current_outputs(resources_reply);
+        for (int o = 0; o < resources_reply->num_outputs; o++) {
+            xcb_randr_output_t output = outputs[o];
+            double cur, new, step;
+            double min, max;
+            double set;
+
+            cur = (double)backlight_get(conn, output);
+            if (cur != -1) {
+                xcb_randr_query_output_property_cookie_t prop_cookie;
+                xcb_randr_query_output_property_reply_t *prop_reply;
+
+                prop_cookie = xcb_randr_query_output_property(conn, output, backlight);
+                prop_reply = xcb_randr_query_output_property_reply(conn, prop_cookie, &error);
+
+                if (error != NULL || prop_reply == NULL)
+                    continue;
+
+                if (prop_reply->range && xcb_randr_query_output_property_valid_values_length(prop_reply) == 2) {
+                    int32_t *values = xcb_randr_query_output_property_valid_values(prop_reply);
+                    min = values[0];
+                    max = values[1];
+
+                    if (op == Get) {
+                        *new_value = (cur - min) * 100 / (max - min);
+                    } else {
+                        set = value * (max - min) / 100;
+                        switch (op) {
+                            case Set:
+                                new = min + set;
+                                break;
+                            case Inc:
+                                new = cur + set;
+                                break;
+                            case Dec:
+                                new = cur - set;
+                                break;
+                            default:
+                                xcb_aux_sync(conn);
+                                return 1;
+                        }
+                        if (new > max)
+                           new = max;
+                        if (new < min)
+                            new = min;
+                        step = (new - cur) / steps;
+                        for (i = 0; i < steps && step != 0; i++) {
+                            if (i == steps - 1)
+                                cur = new;
+                            else
+                                cur += step;
+                            backlight_set( output, (long)(cur + 0.5));
+                            xcb_flush(conn);
+                            usleep(total_time * 1000 / steps);
+                        }
+                    }
+                }
+                free(prop_reply);
+            }
+        }
+
+        free(resources_reply);
+        xcb_screen_next(&iter);
+    }
+
+    xcb_aux_sync(conn);
+    return 0;
+}
+
+int bright_set_(double value) {
+    return run(value, Set, NULL);
+}
+
+int bright_inc_(double value) {
+    return run(value, Inc, NULL);
+}
+
+int bright_dec_(double value) {
+    return run(value, Dec, NULL);
+}
+
+int bright_get_(double* value){
+    return run(0, Get, value);
+}
diff --git a/xbacklight.h b/xbacklight.h
new file mode 100644
index 0000000..ab96534
--- /dev/null
+++ b/xbacklight.h
@@ -0,0 +1,24 @@
+//
+// Created by dk949 on 01/01/2021.
+//
+
+#ifndef XBACKLIGHT_XBACKLIGHT_H
+#define XBACKLIGHT_XBACKLIGHT_H
+
+// dpy_name is the display to be used, If set to NULL, will use DISPLAY env variable
+int bright_setup(char *dpy_name, int step_conf, int time_conf);
+
+// Backlight values go from 0 to 100
+
+// Increment brightness of the backlight
+int bright_inc_(double value);
+
+// Decrement brightness of the backlight
+int bright_dec_(double value);
+
+// Set brightness of the backlight to a certain number
+int bright_set_(double value);
+
+int bright_get_(double* value);
+
+#endif  // XBACKLIGHT_XBACKLIGHT_H
-- 
2.30.0

